#!/usr/bin/env groovy

import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL

try {
  node('master') {
    checkout scm

    // Load tracing definition file
    def trace = load 'pipeline/pipelineTrace.groovy'
    trace.startStage(WORKSPACE, "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Pipeline')

    echo "** BUILD_NUMBER == ${build.number} **"

    // Load Appropriate Stages
    load 'pipeline/stages/_MS_Build_Stage'
    load 'pipeline/stages/_MS_Coverage_Stage'
    load 'pipeline/stages/_MS_Install_Stage'
    load 'pipeline/stages/_MS_ArtifactUpload_Stage'
    load 'pipeline/stages/_MS_DeployToDev_Stage'
    load 'pipeline/stages/_MS_DeployToTest_Stage'

    trace.endStage(WORKSPACE, "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Pipeline')
  }
}
catch (exc) {
/*
 err = caughtError
 currentBuild.result = "FAILURE"
 String recipient = 'infra@lists.jenkins-ci.org'
 mail subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) failed",
         body: "It appears that ${env.BUILD_URL} is failing, somebody should do something about that",
           to: recipient,
      replyTo: recipient,
 from: 'noreply@ci.jenkins.io'
*/
} finally {

  (currentBuild.result != "ABORTED") && node("master") {
    // Send e-mail notifications for failed or unstable builds.
    // currentBuild.result must be non-null for this step to work.
    step([$class                  : 'Mailer',
          notifyEveryUnstableBuild: true,
          recipients              : "${email_to}",
          sendToIndividuals       : true])
  }

// Must re-throw exception to propagate error:
/*
    if (err) {
      throw err
    }
*/
}




